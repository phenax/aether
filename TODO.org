* Current
  - [x] Read/Write files
  - [ ] Import relative instead of from cwd
  - [ ] Parser: Allow string escaping " with \
  - [ ] Parser: tab/newline characters (\t \n)
  - [ ] Car/cdr operations on string
  - [ ] Regex match/replace
  - [ ] Spawning processes + pipes
  - [ ] BUG: Fix issue with macro return value
      - When arg of macro returns an s-expr containing a symbol as argument, it gets evaluated (in if)
      - Maybe prevent arg to macros from becoming unquoted?
  - [ ] Stack trace info first class value
  - [ ] Shortcircuiting for &&, ||
  - [ ] Cleanup your shitty spec
  - [ ] Optimize list stdlib
  - [ ] Get CLI arguments (passed to `aether run`)
  - [ ] Import caching

* Later
  - [ ] Add `...` support for expand macro
  - [ ] Type validation util
  - [ ] Separate macro expansion into separate stage?
  - [ ] Optional properties
  - [ ] require other modules
  - [ ] Optional arguments?
  - [ ] Optimize interpreter perfomance
  - [ ] Socket server mode + socket for commands
  - [ ] IO interface: read from stdin
  - [ ] To js?
  - [ ] UI for sending commands (dmenu-like)
  - [ ] UI repl completion
  - [ ] UI repl highlighting
  - [ ] C ffi

* Maybe
  - [ ] JIT
  - [ ] Record and replay keystrokes/mouse events?

* Integration ideas
  - [ ] UI elements with gtk, qt or sdl
  - [ ] Quick notes
  - [ ] Quick bookmarking
  - [ ] Timer/reminder
  - [ ] Thunderbird integration
  - [ ] Notifications integration
  - [ ] Treesitter based structured file editing?
  - [ ] HTML generator

#+begin_src scheme
; Future plans:
; Asynchronous
; Returns: ProcessID --mapped-to--> stdout/stderr/stdin/processhandle
(proc/spawn '(ls -la /home/user))

; Synchronous
; Calls spawn on each. Pipes sequentially
; Returns: stdout from last pipe (proc/stdout streams it to stdout)
; Throws: if any fail
(proc/pipe
  '(ls -la /path/to/file)
  '(grep "file.*")
  (proc/by-lines (-> [line] (string "hello " line)))
  (proc/tap-lines (-> [line] (displayNl "Line: " line)))
  proc/stdout)
; Transform streams: proc/map-lines, proc/map-char, proc/map-all (same with proc/tap-)
#+end_src

* Resources
- [[https://lispcookbook.github.io/cl-cookbook/error_handling.html]]
- [[https://github.com/elm/compiler/blob/master/compiler/src/AST/Source.hs]]
- [[https://github.com/cisco/ChezScheme/tree/main/examples]]
- [[https://github.com/purescript/purescript/blob/master/src/Language/PureScript/AST/Declarations.hs#L642]]
