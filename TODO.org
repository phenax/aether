* Current
  - [X] Simple parser
  - [X] Simple interpreter
  - [X] Math operations
  - [X] Simple stdlib
  - [X] Quasiquotes
  - [X] Fix lambda scope to be scope of definition and not call site
  - [X] Var args
  - [X] List operations
  - [X] Add distinction between `,` and `,@` for splicing
  - [X] Tests for defmacro
  - [X] Macro for infix operators
  - [X] Generate "primitive lambda" for builtins on symbol lookup
  - [X] IO: display, displayNl
  - [X] Struct/Record
  - [X] Add source location for Expr type
  - [x] Error handling (pcall style)
  - [x] De-structuring macro, `(expand (a b c) (list 1 2 3))`
  - [x] Fix updating symbols `set`/`define`
  - [x] Use Seq for stack
  - [x] Exec commands
  - [ ] Load/import file
  - [ ] Import caching
  - [ ] Spawning processes + pipes
  - [ ] Operations on string
  - [ ] Operations on symbols (from/to symbol)
  - [ ] BUG: Fix issue with macro return value
      - When arg of macro returns an s-expr containing a symbol as argument, it gets evaluated (in if)
      - Maybe prevent arg to macros from becoming unquoted?
  - [ ] Stack trace info first class value
  - [ ] Shortcircuiting for &&, ||
  - [ ] Cleanup your shitty spec
  - [ ] Optimize list stdlib
  - [ ] Parser: allow empty files
  - [ ] CLI arguments (passed to `aether run`)

#+begin_src scheme
; Future plans:
; Asynchronous
; Returns: ProcessID --mapped-to--> stdout/stderr/stdin/processhandle
(proc/spawn '(ls -la /home/user))

; Synchronous
; Calls spawn on each. Pipes sequentially
; Returns: stdout from last pipe (proc/stdout streams it to stdout)
; Throws: if any fail
(proc/pipe
  '(ls -la /path/to/file)
  '(grep "file.*")
  (proc/by-lines (-> [line] (string "hello " line)))
  (proc/tap-lines (-> [line] (displayNl "Line: " line)))
  proc/stdout)
; Transform streams: proc/map-lines, proc/map-char, proc/map-all (same with proc/tap-)
#+end_src

* Later
  - [ ] Repl
  - [ ] Unwrap macro builtin
  - [ ] `%`, `even?`, `odd?`
  - [ ] Add `...` support for de-structuring macro
  - [ ] Type validation util
  - [ ] `(assoc obj ':name "value")`
  - [ ] Optional properties
  - [ ] require other modules
  - [ ] Optional arguments?
  - [ ] Optimize interpreter perfomance
  - [ ] Socket server mode + socket for commands
  - [ ] Parser: Allow string escaping \"
  - [ ] IO interface: read from stdin
  - [ ] Read/Write files
  - [ ] To js?
  - [ ] UI for sending commands (dmenu-like)
  - [ ] UI repl completion
  - [ ] UI repl highlighting

* Maybe
  - [ ] JIT
  - [ ] Record and replay keystrokes/mouse events?

* Integration ideas
  - [ ] UI elements with gtk, qt or sdl
  - [ ] Quick notes
  - [ ] Quick bookmarking
  - [ ] Timer/reminder
  - [ ] Thunderbird integration
  - [ ] Notifications integration
  - [ ] Treesitter based structured file editing?
  - [ ] HTML generator

* Resources
- [[https://lispcookbook.github.io/cl-cookbook/error_handling.html]]
- [[https://github.com/elm/compiler/blob/master/compiler/src/AST/Source.hs]]
- [[https://github.com/cisco/ChezScheme/tree/main/examples]]
- [[https://github.com/purescript/purescript/blob/master/src/Language/PureScript/AST/Declarations.hs#L642]]
